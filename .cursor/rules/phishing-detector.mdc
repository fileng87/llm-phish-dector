---
description: 
globs: 
alwaysApply: true
---
# LLM 釣魚郵件偵測器專案開發規則

## 專案概述
這是一個使用語言模型偵測釣魚郵件/文件的前端專案。使用者可以在介面上設定模型參數，貼上或上傳可疑郵件內容，系統會透過 LangChain 和 LangGraph 工作流來分析內容，並回傳結構化的偵測結果包含信心分數、可疑點和詳細解釋。

## 技術架構規範

### 前端技術棧
- **包管理器**: 使用 `pnpm` 作為包管理工具
- **框架**: Next.js 15+ (App Router)
- **樣式**: Tailwind CSS 4+ 
- **UI 元件**: shadcn/ui 元件庫
- **動畫**: Framer Motion
- **語言**: TypeScript

### 語言模型整合
- **工作流**: LangChain + LangGraph 用於建構偵測工作流
- **執行環境**: 設定等參數保持前端執行，其他需要node環境的在後端執行
- **輸出格式**: 使用結構化輸出 (JSON Schema) 確保回應一致性

## 設計系統規範

### 現代毛玻璃風格 (Glassmorphism)
1. **毛玻璃效果**:
   - 使用 `backdrop-blur-md` 和 `backdrop-blur-lg` 創造模糊背景效果
   - 透明度設定：主要容器使用 `bg-white/10` 或 `bg-black/5`
   - 邊框：使用 `border border-white/20` 創造輕微的邊框效果
   - 陰影：使用 `shadow-xl` 和 `shadow-2xl` 增加深度感

2. **玻璃元件類別**:
   ```css
   .glass {
     @apply backdrop-blur-md bg-white/10 dark:bg-white/5 border border-white/20 dark:border-white/10;
   }
   
   .glass-card {
     @apply backdrop-blur-lg bg-white/15 dark:bg-white/5 border border-white/25 dark:border-white/15 shadow-xl;
   }
   
   .glass-strong {
     @apply backdrop-blur-xl bg-white/20 dark:bg-white/10 border border-white/30 dark:border-white/20 shadow-2xl;
   }
   ```

3. **交互效果**:
   - 懸停效果：`hover:bg-white/20 hover:border-white/30 transition-all duration-300`
   - 焦點效果：`focus:bg-white/25 focus:border-white/40`
   - 發光效果：使用自定義 `glow` 和 `glow-hover` 類別

### 線性設計 (Linear Design)
1. **線性元素**:
   - 使用細線分隔：`border-t border-white/10` 或 `border-b border-white/10`
   - 線性漸變背景：`bg-gradient-to-r from-blue-500/20 to-purple-500/20`
   - 線性進度指示器：使用 `linear-gradient` 創造進度條效果

2. **幾何形狀**:
   - 偏愛直線和簡潔的幾何形狀
   - 使用 `rounded-lg` 和 `rounded-xl` 而非過於圓潤的邊角
   - 線性圖標：優先使用 Lucide React 的線條風格圖標

3. **排版層次**:
   - 使用線性間距：`space-y-4`, `space-y-6`, `space-y-8`
   - 網格佈局：`grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6`
   - 線性對齊：`flex flex-col` 和 `items-center justify-center`

### 響應式網頁設計 (RWD)
1. **斷點系統**:
   - 手機：`< 640px` (預設)
   - 平板：`sm: 640px+`
   - 小筆電：`md: 768px+`
   - 桌電：`lg: 1024px+`
   - 大螢幕：`xl: 1280px+`
   - 超大螢幕：`2xl: 1536px+`

2. **響應式容器**:
   ```css
   .responsive-container {
     @apply container mx-auto px-4 sm:px-6 lg:px-8;
   }
   
   .responsive-grid {
     @apply grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 lg:gap-8;
   }
   ```

3. **響應式文字**:
   - 標題：`text-2xl sm:text-3xl lg:text-4xl`
   - 內文：`text-sm sm:text-base lg:text-lg`
   - 間距：`p-4 sm:p-6 lg:p-8`

4. **行動優先設計**:
   - 所有佈局從手機開始設計
   - 使用觸控友好的按鈕尺寸 (`min-h-[44px]`)
   - 適當的點擊區域間距

### 色彩系統
1. **主色調**:
   - 主要：藍色系 `blue-500` 到 `blue-700`
   - 輔助：紫色系 `purple-500` 到 `purple-700`
   - 強調：綠色系 `green-500` (成功)、紅色系 `red-500` (危險)

2. **透明度層級**:
   - 輕微：`/5` (5% 透明度)
   - 一般：`/10` 到 `/20` (10-20% 透明度)
   - 明顯：`/30` 到 `/40` (30-40% 透明度)

3. **深色模式支援**:
   - 使用 `dark:` 前綴適配深色主題
   - 毛玻璃效果在深色模式下使用較低透明度

## 檔案結構指南

### 主要檔案位置
- 主頁面: [src/app/page.tsx](mdc:src/app/page.tsx)
- 全域樣式: [src/app/globals.css](mdc:src/app/globals.css)
- 專案設定: [package.json](mdc:package.json)
- TypeScript 設定: [tsconfig.json](mdc:tsconfig.json)

### 建議的目錄結構
```
src/
├── app/                    # Next.js App Router 頁面
├── components/             # 可重用的 React 元件
│   ├── ui/                # shadcn/ui 元件
│   ├── forms/             # 表單相關元件
│   └── analysis/          # 分析結果顯示元件
├── lib/                   # 核心功能和工具
│   ├── langchain/         # LangChain 設定和工作流
│   ├── schemas/           # TypeScript 類型定義和 JSON Schema
│   └── utils/             # 工具函數
├── hooks/                 # 自定義 React Hooks
└── types/                 # TypeScript 類型定義
```

## 開發準則

### 前端開發
1. **元件設計**: 使用 shadcn/ui 元件作為基礎，保持一致的設計語言
2. **毛玻璃增強**: 在 shadcn/ui 元件基礎上添加毛玻璃效果，不修改核心結構
3. **狀態管理**: 優先使用 React 內建的 useState 和 useReducer，避免額外的狀態管理庫
4. **動畫效果**: 使用 Framer Motion 提供流暢的使用者體驗
5. **響應式設計**: 確保在不同螢幕尺寸下都有良好的使用體驗

### UI 元件增強原則
1. **shadcn/ui 元件保持原樣**: 不修改 `/components/ui/` 下的基礎元件
2. **外層包裝增強**: 使用額外的 div 或 Container 添加毛玻璃效果
3. **className 擴展**: 通過 `className` prop 添加 glass 相關樣式
4. **自定義 Wrapper**: 創建包裝元件來增強視覺效果

### 語言模型整合
1. **工作流設計**: 使用 LangGraph 建構清晰的分析流程
2. **提示詞管理**: 將系統提示詞模組化，便於維護和調整
3. **錯誤處理**: 妥善處理模型 API 錯誤和網路問題
4. **結構化輸出**: 定義清晰的 JSON Schema 確保回應格式一致

### CSS 類別規範
1. **毛玻璃類別**:
   ```css
   .glass-minimal { @apply backdrop-blur-sm bg-white/5 border border-white/10; }
   .glass { @apply backdrop-blur-md bg-white/10 border border-white/20; }
   .glass-card { @apply backdrop-blur-lg bg-white/15 border border-white/25 shadow-xl; }
   .glass-strong { @apply backdrop-blur-xl bg-white/20 border border-white/30 shadow-2xl; }
   ```

2. **發光效果**:
   ```css
   .glow { @apply shadow-lg shadow-blue-500/25; }
   .glow-hover { @apply hover:shadow-xl hover:shadow-blue-500/30 transition-shadow duration-300; }
   .glow-strong { @apply shadow-xl shadow-purple-500/25; }
   ```

3. **響應式工具類別**:
   ```css
   .container-responsive { @apply container mx-auto px-4 sm:px-6 lg:px-8; }
   .grid-responsive { @apply grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6; }
   .text-responsive { @apply text-sm sm:text-base lg:text-lg; }
   ```

### 資料結構規範

#### 偵測結果格式
```typescript
interface PhishingDetectionResult {
  isPhishing: boolean;          // 是否為釣魚郵件
  confidenceScore: number;      // 信心分數 (0-100)
  suspiciousPoints: string[];   // 可疑點列表
  explanation: string;          // 詳細解釋
  riskLevel: 'low' | 'medium' | 'high'; // 風險等級
  timestamp: string;            // 分析時間戳
}
```

#### 使用者輸入格式
```typescript
interface AnalysisRequest {
  emailContent: string;         // 郵件內容
  modelSettings: {
    provider: string;           // 模型提供商
    model: string;              // 模型名稱
    temperature: number;        // 溫度參數
    apiKey?: string;           // API 金鑰 (僅前端儲存)
  };
}
```

## 效能和安全性考量

### 前端效能
1. **代碼分割**: 使用 Next.js 的動態導入分割大型依賴
2. **快取策略**: 適當快取模型回應以減少重複請求
3. **載入狀態**: 提供清晰的載入指示器和進度回饋
4. **圖像優化**: 使用 Next.js Image 元件優化圖片載入
5. **CSS 優化**: 使用 Tailwind CSS 的 JIT 模式減少未使用的樣式

### 資料安全
1. **API 金鑰管理**: 僅在前端本地儲存，不傳輸至任何後端
2. **內容隱私**: 郵件內容不會儲存或傳輸至除了選定的 LLM 提供商以外的任何地方
3. **輸入驗證**: 對使用者輸入進行適當的驗證和清理

## 程式碼風格和品質

### 格式化和 Linting
- 使用 Prettier 進行代碼格式化 (設定檔: [prettier.config.mjs](mdc:prettier.config.mjs))
- 使用 ESLint 進行代碼品質檢查 (設定檔: [eslint.config.mjs](mdc:eslint.config.mjs))
- 使用 Husky 和 lint-staged 進行提交前檢查

### TypeScript 規範
1. **嚴格模式**: 啟用嚴格的 TypeScript 檢查
2. **類型定義**: 為所有公共 API 和重要函數提供明確的類型定義
3. **接口設計**: 使用 interface 定義資料結構，使用 type 定義聯合類型

### 命名規範
- **檔案**: kebab-case (例: `phishing-detector.tsx`)
- **元件**: PascalCase (例: `PhishingDetector`)
- **函數和變數**: camelCase (例: `analyzePhishingContent`)
- **常數**: UPPER_SNAKE_CASE (例: `DEFAULT_CONFIDENCE_THRESHOLD`)
- **CSS 類別**: kebab-case (例: `glass-card`, `glow-hover`)

## 測試和部署

### 開發工作流
1. **開發伺服器**: `pnpm dev` (使用 Turbopack 加速)
2. **建構**: `pnpm build`
3. **格式化**: `pnpm lint`
4. **設計系統測試**: 在不同裝置和螢幕尺寸下測試響應式設計

### 部署考量
- 適合部署到 Vercel、Netlify 等靜態網站託管平台
- 確保所有 LLM API 呼叫都在客戶端執行
- 配置適當的環境變數管理 (如果需要預設 API 金鑰)
- CDN 優化：確保毛玻璃效果在不同網路環境下的性能表現

## 無障礙設計 (Accessibility)

### 視覺無障礙
1. **對比度**: 確保毛玻璃效果不影響文字可讀性
2. **焦點指示**: 為所有交互元素提供清晰的焦點狀態
3. **色彩依賴**: 不僅依賴色彩傳達資訊，同時使用圖標和文字

### 操作無障礙
1. **鍵盤導航**: 確保所有功能都可以通過鍵盤操作
2. **語義化 HTML**: 使用適當的 HTML 標籤和 ARIA 屬性
3. **響應式觸控**: 確保觸控目標至少 44px × 44px

## 未來擴展考慮

### 功能增強
1. **批次分析**: 支援同時分析多封郵件
2. **歷史記錄**: 在本地儲存分析歷史
3. **匯出功能**: 支援分析結果的匯出
4. **多語言支援**: 支援不同語言的釣魚郵件偵測
5. **主題自定義**: 允許使用者調整毛玻璃效果強度

### 模型支援
1. **多模型比較**: 同時使用多個模型進行分析比較
2. **自定義提示詞**: 允許使用者自定義分析提示詞
3. **微調支援**: 為特定使用場景微調偵測邏輯

### 設計系統演進
1. **動態毛玻璃**: 根據背景內容動態調整模糊強度
2. **3D 效果**: 探索更深層次的視覺深度效果
3. **動畫增強**: 添加更流暢的過渡動畫
4. **個性化**: 允許使用者自定義界面風格偏好
